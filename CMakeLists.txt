set (MY_SOLUTION_NAME ComponentEngine)

set (CDL_NAME OPRoSCDL)

cmake_minimum_required(VERSION 2.6)

PROJECT(${MY_SOLUTION_NAME})

set (EXECUTABLE_OUTPUT_PATH ${CMAKE_BINARY_DIR})

set (LIBRARY_OUTPUT_PATH ${CMAKE_BINARY_DIR})

set (OPROS_HOME ${PROJECT_SOURCE_DIR})





FILE(GLOB_RECURSE SRCS src/*.cpp)

FILE(GLOB_RECURSE CDLSRCS cdl/*.cpp src/archive/*.cpp)

FILE(GLOB_RECURSE WINSRCS win/*.cpp)


SET(CMAKE_INSTALL_PREFIX "d:/out/install")

FIND_PACKAGE(ZLIB)

IF (ZLIB_FOUND)
set(ZLIB_INTERNAL FALSE)
ELSE(ZLIB_FOUND)
set(ZLIB_INTERNAL TRUE)
ENDIF(ZLIB_FOUND)

IF (ZLIB_INTERNAL)
set(ZLIB_INCLUDE_DIR 
   ${CMAKE_SOURCE_DIR}/3rd_party/zlib 
   ${CMAKE_BINARY_DIR}/3rd_party/zlib CACHE INTERNAL "zlibinc")
set(ZLIB_LIBRARY ${CMAKE_BINARY_DIR} CACHE INTERNAL "zliblib")
set(ZLIB_FOUND TRUE)

MESSAGE(STATUS "==== INTERNAL ZLIB USED ==== ")

ENDIF(ZLIB_INTERNAL)

INCLUDE_DIRECTORIES(
        ${OPROS_HOME}/include
        ${PROJECT_SOURCE_DIR}/3rd_party/libarchive/libarchive
        ${PROJECT_SOURCE_DIR}/src
        ${PROJECT_SOURCE_DIR}/cdl
        ${PROJECT_SOURCE_DIR}/src/system/os
        ${MY_INCLUDE_DIRS}
)

ADD_LIBRARY(${CDL_NAME} STATIC ${CDLSRCS})

add_subdirectory(3rd_party/zlib EXCLUDE_FROM_ALL)

add_subdirectory(3rd_party/libarchive EXCLUDE_FROM_ALL)

add_subdirectory(example/helloworld/sources/HelloMaker)

add_subdirectory(example/helloworld/sources/MessagePrinter)

add_subdirectory(example/hellobrill/sources/CBHelloMaker)

add_subdirectory(example/hellobrill/sources/CBMessagePrinter)

add_subdirectory(example/droneTest)


IF (MSVC)

ADD_DEFINITIONS(-DEXECUTOR_USE_ADAPTOR -DNO_VERIFY_COMPONENT -DNO_BOOST /wd4290 /wd4996)

REMOVE_DEFINITIONS(-DZ_HAVE_UNISTD_H)

ADD_EXECUTABLE(${MY_SOLUTION_NAME}  ${SRCS} ${WINSRCS})

TARGET_LINK_LIBRARIES(${MY_SOLUTION_NAME}  ws2_32.lib winmm.lib archive_static zlibstatic)


ELSEIF(MINGW)
ADD_DEFINITIONS(-DEXECUTOR_USE_ADAPTOR -DNO_VERIFY_COMPONENT -DNO_BOOST)

ADD_EXECUTABLE(${MY_SOLUTION_NAME}  ${SRCS} )
SET_TARGET_PROPERTIES(archive_static PROPERTIES COMPILE_FLAGS "-Wno-error -D_SSIZE_T_DEFINED")
#set(CMAKE_C_FLAGS_DEBUG "-g")
#set(CMAKE_CXX_FLAGS_DEBUG "-g")
set(CMAKE_C_FLAGS_DEBUG "-Os")
set(CMAKE_CXX_FLAGS_DEBUG "-Os")

TARGET_LINK_LIBRARIES(${MY_SOLUTION_NAME} ws2_32.lib winmm.lib archive_static zlibstatic)

ELSEIF(APPLE)

ADD_DEFINITIONS(-DEXECUTOR_USE_ADAPTOR -DNO_VERIFY_COMPONENT -DNO_BOOST)

ADD_EXECUTABLE(${MY_SOLUTION_NAME}  ${SRCS} )

TARGET_LINK_LIBRARIES(${MY_SOLUTION_NAME} pthread dl archive_static zlibstatic)


ELSE(MSVC)
set(CMAKE_C_FLAGS "-fPIC -g")
set(CMAKE_CXX_FLAGS "-fPIC -g")

ADD_DEFINITIONS(-DEXECUTOR_USE_ADAPTOR -DNO_VERIFY_COMPONENT -DNO_BOOST)

ADD_EXECUTABLE(${MY_SOLUTION_NAME}  ${SRCS} )

IF (ZLIB_INTERNAL)
TARGET_LINK_LIBRARIES(${MY_SOLUTION_NAME} pthread dl rt archive_static zlibstatic)
ELSE(ZLIB_INTERNAL)
TARGET_LINK_LIBRARIES(${MY_SOLUTION_NAME} pthread dl rt archive_static z)
ENDIF(ZLIB_INTERNAL)
ENDIF(MSVC)


ADD_DEFINITIONS(-DMAKE_COMPONENT_DLL)

set(BUILD_TESTING OFF CACHE INTERNAL "disable")
set(ENABLE_TAR OFF CACHE INTERNAL "disable tar")
set(ENABLE_ACL OFF CACHE INTERNAL "disable")
set(ENABLE_CPIO OFF CACHE INTERNAL "disable")
set(ENABLE_CPIO_SHARED OFF CACHE INTERNAL "disable")
set(ENABLE_ICONV OFF CACHE INTERNAL "disable")
set(ENABLE_NETTLE OFF CACHE INTERNAL "disable")
set(ENABLE_OPENSSL OFF CACHE INTERNAL "disable")
set(ENABLE_TAR_SHARED OFF CACHE INTERNAL "disable")
set(ENABLE_TEST OFF CACHE INTERNAL "disable")
set(ENABLE_XATTR OFF CACHE INTERNAL "disable")

GET_TARGET_PROPERTY(ENGINE_NAME ComponentEngine LOCATION)
ADD_CUSTOM_COMMAND(TARGET ComponentEngine
	POST_BUILD
	COMMAND ${CMAKE_COMMAND} -E copy ${ENGINE_NAME} ${OPROS_HOME}/test/
)
